import a from"../src/controllers/validator.controller.js";import{PrismaClient as e}from"@prisma/client";let prisma=new e({transactionOptions:{timeout:9e3,maxWait:1e4}});export class Account{static async deleteAccount(a,e,t){return await prisma.usuario.delete({where:{ID:parseInt(a.params.ID)}}),e.status(200).send("Usuario eliminado")}static async getAccount(a,e,t){if(!a.params.ID){let s=await prisma.$queryRaw`SELECT ID FROM Fecha order by ID desc LIMIT 1;`,r=await prisma.usuario.findMany({where:{Equipo:{every:{Fecha:{is:{ID:s.ID}}}}}});return r.map(a=>({})),e.send(r)}let i=await prisma.usuario.findFirst({where:{ID:parseInt(a.params.ID)},include:{Equipo:{include:{Fecha:!0}}}});return e.json(i)}static async UpdateAccount(a,e,t){let s=parseInt(a.params.id),r=await prisma.usuario.update({where:{ID:s},data:{Nickname:a.body.username,Contrase_a:a.body.password,Mail:a.body.email,Equipo:{update:{where:{ID:s},data:{NombreEquipo:a.body.teamname}}}}});return e.json(r)}static async login(e,t,s){let{email:r,password:i}=e.body,o=await prisma.usuario.findFirst({where:{Mail:r}});if(!o)return t.status(404),t.send("Usuario no encontrado");if(await a.comparePassword(i,o.Contrase_a)){let n=await a.validationToken(e.cookies.token);if(n instanceof Error){if("jwt expired"===n.message||"Token no dado"===n.message){let c=await a.createToken({email:r});return t.cookie("token",c).cookie("user",o.ID).status(200).send(o)}return t.status(401).send({message:n.message})}return t.cookie("user",o.ID).send(o)}return t.status(400).send({message:"Contrase\xf1a incorrecta"})}static async register(e,t,s){try{let r=await a.createToken({email:e.body.email});console.log("token is generated"),t.cookie("token",r),console.log("token:",r)}catch(i){return console.log(i),t.status(401).send(i)}let o=await prisma.$queryRaw`SELECT ID, fecha FROM Fecha order by ID desc LIMIT 1;`,n=await prisma.usuario.create({data:{Nickname:e.body.username,Contrase_a:await a.hashPassword(e.body.password),Mail:e.body.email,Presupuesto:100,Transferencias:2,Wildcard:!0,usandoWildcard:1,logged:!0,Equipo:{create:{NombreEquipo:e.body.teamname,Puntuacion:0,Fecha:{connect:{ID:o[0].ID}}}}},include:{Equipo:{include:{Equipo_Jugador:{include:{Jugador:!0}}}}}});return t.cookie("user",n.ID),t.json(n)}}export class Team{static async getTeam(a,e,t){let s=Fecha.getFecha();if(!parseInt(a.params.USERID)){let r=await prisma.equipo.findMany({where:{Fecha_ID:s.ID},include:{Equipo_Jugador:{include:{Jugador:!0}}}});return e.send(r),r}let i=await prisma.equipo.findMany({where:{ID_Usuario:parseInt(a.params.USERID)},include:{Equipo_Jugador:{include:{Jugador:!0}}}});return e.send(i),i}static async updateTeam(a,e,t){if(parseInt(a.headers.transfer))return e.send(await Team.transferTeam(a));let s=await prisma.$queryRaw`SELECT ID FROM Equipo where ID_Usuario like ${a.params.USERID}`,r=await prisma.equipo.update({where:{ID:s[0].ID},data:{NombreEquipo:a.body.teamname??Team.getTeam(a,{send(){}}).NombreEquipo}});return e.send(r)}static async transferTeam(a){let{USERID:e}=a.params,{players:t,cantTransfers:s}=a.body,r=await Fecha.getFecha();if(r.estaCerrado)return{message:"No es posible hacer transferencias cuando la fecha esta cerrada"};let i=await prisma.equipo.findFirst({where:{ID_Usuario:parseInt(e),Fecha_ID:r.ID}}),o={};await Account.getAccount({params:{ID:parseInt(e)}},{json(a){o=a}},()=>{});let n=s.length>o.Transferencias?2*s.length:0,c=[prisma.usuario.update({where:{ID:parseInt(e)},data:{Presupuesto:a.body.budget,Transferencias:2-s.length},include:{Equipo:!0}}),prisma.equipo.update({where:{ID:i.ID},data:{Puntuacion:n}}),prisma.equipo_Jugador.deleteMany({where:{ID_Equipo:i.ID}}),prisma.equipo_Jugador.createMany({data:t.map(a=>({playerOrder:a.playerOrder,estaEnBanca:a.estaEnBanca,esCapitan:a.esCapitan,ID_Equipo:i.ID,ID_Jugador:a.ID_Jugador}))})];for(let u of s)c.push(prisma.jugador.update({where:{ID:u},data:{cantTransfer:{increment:1}}}));return await prisma.$transaction(c),"ok"}static async createTeam(a,e,t){return await prisma.$transaction(async a=>{let e=await Fecha.getFecha(),t=await a.equipo.findMany({where:{Fecha_ID:e.ID},include:{Equipo_Jugador:!0}}),s=await Fecha.createFecha();await a.equipo.createMany({data:t.map(a=>({NombreEquipo:a.NombreEquipo,Puntuacion:0,ID_Usuario:a.ID_Usuario,Fecha_ID:s.ID}))});let r=await a.equipo.findMany({where:{Fecha_ID:s.ID}});await Player.updatePrice();let i=[];for(let o in t)for(let n of t[o].Equipo_Jugador)i.push({ID_Equipo:r[o].ID,esCapitan:n.esCapitan,estaEnBanca:n.estaEnBanca,ID_Jugador:n.ID_Jugador,playerOrder:n.playerOrder});await a.equipo_Jugador.createMany({data:i})}),e.send("Hecho")}}export class Fecha{static async getFecha(){let a=await prisma.fecha.findFirst({orderBy:[{ID:"desc"}]});return a}static async createFecha(){let a=new Date(Date.now()+6048e5),e=await prisma.fecha.create({data:{fecha:`${a.getFullYear()}-${a.getMonth()+1}-${a.getDate()}`,estaCerrado:0}});return e}}export class Player{static players={testPlayer:{name:"testPlayer",team:"testTeam",stats:{goles:0,asistencias:0}}};static async updatePrice(){let a=[];await Player.getPlayers({params:{}},{json:e=>a=e});let e=[];for(let t of a){let s=t.Estadistica[t.Estadistica.length-1]?.puntos;s&&(t.Estadistica[t.Estadistica.length-1].puntos>=10?t.precio+=Math.fround(s/4):t.precio-=Math.fround(s/4),t.precio<4.5&&(t.precio=4.5),e.push(prisma.jugador.update({where:{ID:t.ID},data:{precio:t.precio}})))}await prisma.$transaction(e)}static async getPlayers(a,e,t){let s=a.params?.ID?{ID:parseInt(a.params.ID)}:{},r=await prisma.jugador.findMany({where:s,include:{Estadistica:{select:{ID_Fecha:!0,goles:!0,asistencias:!0,intercepciones:!0,atajadas:!0,penalesErrados:!0,penalesAtajados:!0,asistioAClase:!0,puntos:!0}}}});return e.json(r)}}export class Stat{static async getPlayerPoints(a,e){let t=0;if(a.assistance){switch(t++,e.categoria){case"DEL":t+=4*a.goals;break;case"DF":t+=6*a.goals;break;case"MC":t+=5*a.goals;break;case"PT":t+=10*a.goals}return t+=3*a.assists,t-=2*a.failedPenalties,t+="PT"===e.categoria?0:parseInt(a.interceptions/2),t+=5*a.savedPenalties,t+="PT"===e.categoria?parseInt(a.saves/2):0}}static async createStat(a,e,t){let s=await Fecha.getFecha(),r={};await Player.getPlayers({params:{ID:a.params.ID}},{json:a=>r=a}),console.log(r);let i=await prisma.estadistica.create({data:{goles:a.body.goals,asistencias:a.body.assists,intercepciones:a.body.interceptions,atajadas:a.body.saves,penalesErrados:a.body.failedPenalties,penalesAtajados:a.body.savedPenalties,asistioAClase:a.body.assistance,puntos:await Stat.getPlayerPoints(a.body,r[0]),Fecha:{connect:{ID:s.ID}},Jugador:{connect:{ID:parseInt(a.params.ID)}}}});return e.json(i)}}